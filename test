// Read from env so you don’t bake secrets into the image
val nexusBase = System.getenv("NEXUS_BASE_URL") ?: "https://nexus.example.com"
val mavenGroup = System.getenv("NEXUS_MAVEN_GROUP") ?: "$nexusBase/repository/maven-group/"
val googleProxy = System.getenv("NEXUS_GOOGLE") ?: "$nexusBase/repository/google/"
val pluginProxy = System.getenv("NEXUS_GRADLE_PLUGINS") ?: "$nexusBase/repository/gradle-plugins/"

val nxUser = System.getenv("NEXUS_USERNAME")
val nxPass = System.getenv("NEXUS_PASSWORD")

fun org.gradle.api.artifacts.dsl.RepositoryHandler.nexus(url: String) {
    maven {
        setUrl(url)
        if (!nxUser.isNullOrBlank() && !nxPass.isNullOrBlank()) {
            credentials {
                username = nxUser
                password = nxPass
            }
        }
        metadataSources { mavenPom(); artifact() }
    }
}

// Apply to every project’s repositories
allprojects {
    repositories {
        clear()
        nexus(mavenGroup)
        nexus(googleProxy)       // if you proxy Google separately
    }
}

// Force plugin resolution (affects settings.gradle pluginManagement)
gradle.settingsEvaluated {
    pluginManagement {
        repositories {
            clear()
            maven {
                setUrl(pluginProxy)
                if (!nxUser.isNullOrBlank() && !nxPass.isNullOrBlank()) {
                    credentials {
                        username = nxUser
                        password = nxPass
                    }
                }
            }
        }
    }
}

// Optionally block any non-Nexus repos that a project tries to add
gradle.beforeProject {
    repositories.whenObjectAdded {
        if (this is org.gradle.api.artifacts.repositories.MavenArtifactRepository &&
            !url.toString().startsWith(nexusBase)) {
            throw org.gradle.api.GradleException("External repositories are blocked. Use Nexus ($nexusBase).")
        }
    }
}